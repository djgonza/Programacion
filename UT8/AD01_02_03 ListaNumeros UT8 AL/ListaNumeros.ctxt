#BlueJ class context
comment0.params=
comment0.target=ListaNumeros()
comment0.text=\r\n\ Constructor\ de\ la\ clase\ ListaNumeros\r\n
comment1.params=numero
comment1.target=void\ add(int)
comment1.text=\r\n\ \ \r\n
comment2.params=
comment2.target=void\ vaciarLista()
comment2.text=\r\n\ \ Vacia\ la\ lista\ de\ n\u00FAmeros\r\n
comment3.params=nombre
comment3.target=int\ leerDeFicheroV1(java.lang.String)
comment3.text=\r\n\ \ lee\ del\ fichero\ de\ texto\ especificado\ como\ par\u00E1metro\r\n\ \ una\ serie\ de\ n\u00FAmeros\ y\ los\ a\u00F1ade\ a\ la\ lista\ en\ memoria\r\n\ \ El\ fichero\ de\ texto\ contiene\ una\ serie\ de\ l\u00EDneas\ con\ formato\r\n\ \ n1\:n2\:n3\:....\ ,\ es\ decir,\ en\ cada\ l\u00EDnea\ hay\ una\ serie\ de\ n\u00FAmeros\ separados\ por\r\n\ \ el\ caracter\ \:\r\n\ \ \r\n\ \ El\ fichero\ se\ lee\ l\u00EDnea\ a\ l\u00EDnea\ (con\ BufferedReader)\ y\ con\ ayuda\ del\r\n\ \ m\u00E9todo\ parserLinea()\ se\ extrae\ cada\ n\u00BA\ y\ se\ a\u00F1ade\ a\ la\ lista.\ \r\n\ \ Se\ capturar\u00E1n\ aqu\u00ED\ todas\ las\ posibles\ excepciones\r\n\ \ \r\n\ \ \r\n\ \ El\ m\u00E9todo\ devuelve\ la\ cantidad\ total\ de\ valores\ err\u00F3neos\ le\u00EDdos\r\n
comment4.params=linea
comment4.target=int\ parsearLinea(java.lang.String)
comment4.text=\r\n\ \ A\ partir\ de\ una\ l\u00EDnea\ de\ texto\ extrae\ los\ n\u00FAmeros\ y\ los\ a\u00F1ade\ a\ la\ lista\r\n\ \ Las\ excepciones\ de\ formato\ se\ capturar\u00E1n\ contabilizando\ los\ n\u00BAs\ err\u00F3neos\r\n\ \ que\ se\ detectan.\ El\ programa\ no\ para\ cuando\ encuentra\ un\ error\r\n
comment5.params=nombre
comment5.target=int\ leerDeFicheroV2(java.lang.String)
comment5.text=\r\n\ \ \ Haz\ lo\ mismo\ que\ en\ leerDeFicheroV1()\ pero\ ahora\ usando\ la\ clase\ Scanner\r\n\ \ \r\n\ \ El\ fichero\ se\ lee\ l\u00EDnea\ a\ l\u00EDnea\ (con\ Scanner)\ y\ con\ ayuda\ del\r\n\ \ m\u00E9todo\ parserLinea()\ se\ extrae\ cada\ n\u00BA\ y\ se\ a\u00F1ade\ a\ la\ lista.\ \r\n\ \ Se\ capturar\u00E1n\ aqu\u00ED\ todas\ las\ posibles\ excepciones\r\n\ \ \r\n\ \ \r\n\ \ El\ m\u00E9todo\ devuelve\ la\ cantidad\ total\ de\ valores\ err\u00F3neos\ le\u00EDdos\r\n
comment6.params=
comment6.target=int\ maximo()
comment6.text=\r\n\ \ Calcula\ y\ devuelve\ el\ valor\ m\u00E1ximo\ de\ la\ colleci\u00F3n\ (usa\ la\ clase\ Collections)\r\n
comment7.params=
comment7.target=java.util.List\ ordenarDescendente()
comment7.text=\r\n\ \ Devuelve\ una\ colecci\u00F3n\ ordenada\ de\ mayor\ a\ menor\r\n\ \ Sin\ modificar\ la\ coleci\u00F3n\ original\r\n
comment8.params=nombre
comment8.target=void\ salvarEnFichero(java.lang.String)
comment8.text=\r\n\ \ Guarda\ en\ el\ fichero\ cuyo\ nombre\ indica\ el\ par\u00E1metro\r\n\ \ el\ valor\ m\u00E1ximo\ de\ la\ colecci\u00F3n\ en\ una\ l\u00EDnea\ y\ \r\n\ \ la\ colecci\u00F3n\ ordenada\ descendentemente\ en\ otra\ l\u00EDnea\r\n\ \ \r\n\ \ Se\ propagar\u00E1n\ todas\ las\ posibles\ excepciones\r\n
comment9.params=args
comment9.target=void\ main(java.lang.String[])
comment9.text=\r\n\ \ -\ crea\ un\ objeto\ ListaNumeros\r\n\ \ -\ lee\ del\ fichero\ "numeros.txt"\ los\ n\u00BAs\ y\ gu\u00E1rdalos\ en\ la\ lista\ (usa\ leerDeFicheroV1())\r\n\ \ -\ muestra\ la\ cantidad\ de\ valores\ err\u00F3neos\ le\u00EDdos\r\n\ \ -\ guarda\ en\ el\ fichero\ "resultado1.txt"\ el\ m\u00E1ximo\ y\ la\ lista\ en\ orden\ descendente\r\n\ \ -\ vacia\ la\ lista\r\n\ \ -\ lee\ del\ fichero\ "numeros.txt"\ los\ n\u00BAs\ y\ gu\u00E1rdalos\ en\ la\ lista\ (usa\ leerDeFicheroV2())\r\n\ \ -\ guarda\ en\ el\ fichero\ "resultado2.txt"\ el\ m\u00E1ximo\ y\ la\ lista\ en\ orden\ descendente\r\n\ \ \r\n\ \ \ Propaga\ todas\ las\ posibles\ excepciones\r\n
numComments=10
