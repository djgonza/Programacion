#BlueJ class context
comment0.params=corrector
comment0.target=Examen(CorrectorExamen)
comment0.text=\r\n\ Constructor\ de\ la\ clase\ Examen\r\n\ Propagar\ las\ excepciones\r\n
comment1.params=alumno\ nota
comment1.target=void\ add(java.lang.String,\ double)
comment1.text=\r\n\ \ A\u00F1ade\ al\ map\ el\ alumno\ (siempre\ en\ may\u00FAsculas)\ junto\ con\ su\ nota\r\n\ \ \r\n
comment10.params=
comment10.target=void\ print()
comment10.text=\r\n\ \ \r\n
comment2.params=alumno
comment2.target=double\ notaDe(java.lang.String)
comment2.text=\r\n\ \ Devuelve\ la\ nota\ del\ alumno\ indicado\r\n\ \ Si\ no\ existe\ el\ alumnose\ lanza\ la\ excepci\u00F3n\ personalizada\r\n\ \ AlumnoNoExistenteException\r\n
comment3.params=
comment3.target=int\ aprobados()
comment3.text=\r\n\ \ Calcula\ y\ devuelve\ cu\u00E1ntos\ han\ aprobado\ el\ test\r\n
comment4.params=
comment4.target=java.lang.String\ toString()
comment4.text=\r\n\ \ Representaci\u00F3n\ textual\ del\ map\r\n\ \ Con\ el\ conjunto\ de\ entradas\r\n\ \ Cada\ alumno\ con\ su\ nota,\ nombre\ formateado\ a\ 15\ posiciones\ alineado\ a\ la\ derecha,\ \r\n\ \ nota\ formateada\ a\ 6\ posiciones\ (2\ de\ ellas\ decimales)\r\n
comment5.params=
comment5.target=java.util.List\ ordenadosPorNota()
comment5.text=\r\n\ \ Devolver\ una\ colecci\u00F3n\ ArrayList\ con\ los\ nombres\ de\ los\ alumnos\r\n\ \ ordenados\ de\ mayor\ a\ menor\ nota\r\n\ \ Habr\u00E1\ que\ ordenar\ con\ un\ comparador\ la\ colecci\u00F3n\ de\ entradas\ (ver\ enunciado)\r\n\ \ puesto\ que\ no\ podemos\ ordenar\ un\ map\ por\ sus\ valores\r\n
comment6.params=e1\ e2
comment6.target=int\ compare(java.util.Map.Entry,\ java.util.Map.Entry)
comment7.params=
comment7.target=void\ guardarOrdenadosPorNota()
comment7.text=\r\n\ Guarda\ en\ un\ fichero\ de\ texto\ el\ nombre\ de\ cada\ alumno\ y\ su\ nota\r\n\ en\ orden\ decreciente\ de\ nota\r\n\ \r\n\ En\ cada\ l\u00EDnea\ aparece\ l\ nombre\ del\ alumno\ y\ la\ nota,\ ambos\ formateados\r\n\ (nombre\ ocupar\u00E1\ 15\ posiciones\ y\ estar\u00E1\ ajustado\ a\ la\ derecha,\ nota\ formateado\r\n\ a\ 2\ decimales\ ocupando\ 10\ espacios\ y\ ajustado\ a\ la\ derecha)\r\n\ \r\n\ Se\ propagan\ las\ excepciones\r\n
comment8.params=
comment8.target=void\ leerDeFichero()
comment8.text=\r\n\ \ Lee\ del\ fichero\ FIC_ENTRADA\ las\ respuestas\ que\ ha\ dado\ cada\ alumno\ al\ control\r\n\ \ y\ guarda\ en\ el\ map\ la\ nota\ de\ cada\ alumno\ en\ el\ test\r\n\ \ \r\n\ \ Cada\ l\u00EDnea\ del\ fichero\ contiene\ los\ datos\ de\ un\ alumno\r\n\ \ de\ la\ forma\ \r\n\ \ \ \ \ \ nombrealumno\:respuesta\:respuesta\:respuesta\:......\r\n\ \ \ \ \ \ \r\n\ \ Asumimos\ los\ datos\ correctos\r\n\ \ Por\ ejemplo\ \ \ \ pedro\:a\:b\:c\:\ \:d\:a\:a\:\ \:b\:b\r\n\ \ \ \r\n\ \ Con\ BufferedReader\ y\ capturando\ las\ excepciones\r\n
comment9.params=datos
comment9.target=char[]\ parsearRespuestasAlumnos(java.lang.String[])
comment9.text=\r\n\ \ Obtener\ las\ respuestas\ como\ array\ de\ caracteres\r\n
numComments=11
