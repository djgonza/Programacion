#BlueJ class context
comment0.params=cadena
comment0.target=Cadena(java.lang.String)
comment0.text=\r\n\ Constructor\ \ \r\n
comment1.params=cadena
comment1.target=Cadena(Cadena)
comment1.text=\r\n\ Constructor\ \ \r\n
comment10.params=
comment10.target=void\ aMayusculas()
comment10.text=\r\n\ \ paso\ a\ may\u00FAsculas\r\n\ \r\n
comment11.params=
comment11.target=void\ aMinusculas()
comment11.text=\r\n\ \ paso\ a\ min\u00FAsculas\r\n\ \r\n
comment12.params=cadena
comment12.target=boolean\ igualQue(java.lang.String)
comment12.text=\r\n\ \ devuelve\ true\ si\ las\ dos\ cadenas\ son\ iguales\r\n\ \r\n
comment13.params=cadena
comment13.target=boolean\ mayorQue(java.lang.String)
comment13.text=\r\n\ devuelve\ true\ si\ la\ cadena\ del\ objeto\ es\ mayor\ que\r\n\ la\ cadena\ recibidad\ como\ par\u00E1metro\r\n\ \r\n
comment14.params=str
comment14.target=boolean\ empiezaPor(java.lang.String)
comment14.text=\r\n\ devuelve\ true\ si\ la\ cadena\ del\ objeto\ empieza\ por\r\n\ la\ recibida\ como\ par\u00E1metro\ -\ da\ lo\ mismo\ may\u00FAsculas\ que\ min\u00FAsculas\r\n\ \r\n\ \r\n
comment15.params=str
comment15.target=boolean\ contiene(java.lang.String)
comment15.text=\r\n\ devuelve\ true\ si\ la\ cadena\ del\ objeto\ contiene\ a\ la\ recibida\ como\ par\u00E1metro\r\n\ da\ lo\ mismo\ may\u00FAsculas\ que\ min\u00FAsculas\r\n
comment16.params=str
comment16.target=java.lang.String\ cadenaApartirDe(java.lang.String)
comment16.text=\r\n\ \ \ localiza\ la\ \u00FAltima\ aparici\u00F3n\ de\ str\ en\ cadena\ y\ extrae\ ,\ a\ partir\ de\ ah\u00ED,\ \r\n\ \ \ la\ subcadena\ existente\ hasta\ el\ final\r\n\ \ Si\ no\ existe\ str\ devuelve\ null\r\n
comment17.params=
comment17.target=int\ cuantasA()
comment17.text=\r\n\ Cuenta\ el\ n\u00BA\ de\ 'A'\r\n
comment18.params=
comment18.target=Cadena\ invertir()
comment18.text=\r\n\ Devuelve\ un\ objeto\ Cadena\ con\ la\ cadena\ actual\ invertida\r\n
comment19.params=
comment19.target=boolean\ esPalindromaIterativa()
comment19.text=\r\n\ Devuelve\ true\ si\ la\ cadena\ es\ un\ pal\u00EDndromo\r\n\ Versi\u00F3n\ iterativa\r\n
comment2.params=
comment2.target=Cadena()
comment2.text=\r\n\ Constructor\ \ \r\n
comment20.params=
comment20.target=boolean\ esPalindromaRecursiva()
comment20.text=\r\n\ Devuelve\ true\ si\ la\ cadena\ es\ un\ pal\u00EDndromo\r\n\ Versi\u00F3n\ recursiva\r\n
comment21.params=cadena
comment21.target=boolean\ esPalindromaRecursiva(java.lang.String)
comment21.text=\r\n\ \ \r\n\r\n
comment22.params=
comment22.target=java.lang.String\ tresUltimosCaracteres()
comment22.text=\r\n\ Devuelve\ los\ tres\ \u00FAltimos\ caracteres\ de\ la\ cadena\r\n
comment23.params=
comment23.target=void\ visualizarEnTrozos()
comment23.text=\r\n\ Si\ la\ cadena\ es\ "ejemplo"\ \r\n\ hay\ que\ escribir\r\n\ e\r\n\ ej\r\n\ eje\r\n\ ejem\r\n\ ejemp\r\n\ ejempl\r\n\ ejemplo\r\n\ \r\n
comment24.params=
comment24.target=void\ visualizarEnDiagonal()
comment24.text=\r\n\ \ \r\n\ Si\ la\ cadena\ es\ "ejemplo"\ \r\n\ hay\ que\ mostrar\r\n\ e\r\n\ \ j\r\n\ \ \ e\r\n\ \ \ \ m\r\n\ \ \ \ \ p\r\n\ \ \ \ \ \ l\r\n\ \ \ \ \ \ \ o\r\n\ \r\n
comment25.params=otra
comment25.target=boolean\ empiezaYterminaIgualQue(Cadena)
comment25.text=\r\n\ @param\ otra\ la\ cadena\ con\ la\ que\ comparar\r\n\ @return\ true\ si\ la\ cadena\ actual\ empieza\ y\ termina\ por\ el\ mismo\ \r\n\ caracter\ que\ otra\r\n
comment26.params=objetivo\ nuevo
comment26.target=void\ reemplazarPor(char,\ char)
comment26.text=\r\n\ @param\ objetivo\ el\ caracter\ a\ buscar\ en\ la\ cadena\ actual\r\n\ \ @param\ nuevo\ \ el\ caracter\ por\ el\ que\ se\ reemplazar\u00E1\r\n\ \ \r\n
comment27.params=
comment27.target=int\ numeroPalabras()
comment27.text=\r\n\ \ Contar\ las\ palabras\ de\ cadena,\ el\ separador\ entre\ palabras\ es\r\n\ \ el\ car\u00E1cter\ SEPARADOR\r\n\r\n
comment28.params=str
comment28.target=int\ aparicionesDe(java.lang.String)
comment28.text=\r\n\ \ Cuenta\ las\ apariciones\ de\ str\ en\ cadena\r\n\ \ Sin\ diferenciar\ may\u00FAculas\ de\ min\u00FAsculas\r\n\ \ Usar\ indexOf()\ y\ substring()\r\n
comment29.params=str
comment29.target=int\ aparicionesDeV2(java.lang.String)
comment29.text=\r\n\ \ Cuenta\ las\ apariciones\ de\ str\ en\ cadena\r\n\ \ Sin\ diferenciar\ may\u00FAculas\ de\ min\u00FAsculas\r\n\ \ Usar\ solo\ indexOf()\ \ \r\n
comment3.params=
comment3.target=java.lang.String\ getCadena()
comment3.text=\r\n\ accesor\ para\ la\ cadena\ \r\n
comment4.params=cadena
comment4.target=void\ setCadena(java.lang.String)
comment4.text=\r\n\ mutador\ para\ la\ cadena\ \r\n
comment5.params=
comment5.target=int\ longitud()
comment5.text=\r\n\ \ Longitud\ en\ caracteres\ de\ la\ cadena\r\n\ \r\n
comment6.params=
comment6.target=char\ primerCaracter()
comment6.text=\r\n\ \ devolver\ el\ primer\ caracter\r\n\ \r\n
comment7.params=
comment7.target=char\ ultimoCaracter()
comment7.text=\r\n\ \ devolver\ el\ \u00FAltimo\ caracter\r\n\ \r\n
comment8.params=p
comment8.target=char\ caracterDePosicion(int)
comment8.text=\r\n\ \ devolver\ el\ \ caracter\ de\ posici\u00F3n\ p\r\n\ \ Lanzamos\ una\ excepci\u00F3n\ StringIndexOutOfBoundsException\ si\ p\ es\ incorrecta\r\n\ \r\n
comment9.params=otra
comment9.target=Cadena\ concatenarCon(Cadena)
comment9.text=\r\n\ concatena\ la\ cadena\ actual\ con\ la\ recibida\ como\ par\u00E1metro\ y\ devuelve\ un\r\n\ nuevo\ objeto\ Cadena\ que\ la\ encapsula\r\n
numComments=30
