#BlueJ class context
comment0.params=n
comment0.target=ListaNumeros(int)
comment0.text=\r\n\ Constructor\ de\ la\ clase\ ListaNumeros\r\n\ @param\ n\ el\ tama\u00F1o\ m\u00E1ximo\ de\ la\ lista\r\n
comment1.params=numero
comment1.target=boolean\ addElemento(int)
comment1.text=\r\n\ @param\ \ numero\ valor\ que\ se\ a\u00F1ade\ al\ final\r\n\ de\ la\ lista.\ No\ se\ hace\ nada\ si\ la\ lista\ est\u00E1\ completa\r\n\ @return\ true\ si\ se\ ha\ podido\ a\u00F1adir,\ false\ en\ otro\ caso\r\n
comment10.params=n
comment10.target=int\ digitoMasGrande(int)
comment10.text=\r\n\ \ M\u00E9todo\ est\u00E1tico\ recursivo\ que\ devuelve\ el\ d\u00EDgito\ mayor\ de\ n\ (siempre\ se\r\n\ \ devuelve\ d\u00EDgito\ positivo)\r\n\ \ Si\ n\ \=\ 3263\ devuelve\ 6,\ si\ n\ \=\ 9878\ devuelve\ 9,\ si\ n\ \=\ 5\ devuelve\ 5\r\n\ \ Si\ n\ \=\ -3263\ devuelve\ 6\r\n
comment11.params=
comment11.target=int[]\ ordenar()
comment11.text=\r\n\ \ Devuelve\ una\ copia\ de\ lista\ ordenada\r\n\ \ Usa\ solo\ m\u00E9todos\ de\ la\ clase\ \ Arrays\r\n\ \ \ \r\n\r\n
comment12.params=
comment12.target=void\ escribirLista()
comment12.text=\r\n\ Mostrar\ en\ pantalla\ la\ lista\r\n
comment2.params=
comment2.target=boolean\ estaCompleta()
comment2.text=\r\n\ devuelve\ true\ si\ la\ lista\ est\u00E1\ completa,\ false\ en\ otro\ caso\r\n\ Hazlo\ sin\ if\r\n
comment3.params=
comment3.target=boolean\ estaVacia()
comment3.text=\r\n\ devuelve\ true\ si\ la\ lista\ est\u00E1\ vac\u00EDa,\ false\ en\ otro\ caso\r\n\ Hazlo\ sin\ if\r\n
comment4.params=
comment4.target=int\ getTotalNumeros()
comment4.text=\r\n\ @return\ \ devuelve\ el\ n\u00BA\ de\ elementos\r\n\ realmente\ guardados\ en\ la\ lista\ \r\n
comment5.params=
comment5.target=java.lang.String\ toString()
comment5.text=\r\n\ Representaci\u00F3n\ textual\ de\ la\ lista\ de\ la\ forma\r\n\ Si\ lista\ \=\ {175,\ 826,\ 89,\ 9,\ 41,\ 13,\ 72,\ 11,\ 23,\ 107}\ devuelve\r\n\ |\ \ 175\ |\ 826\ |\ 89\ |\ 9\ |\ 41\ |\ 13\ |\ 72\ |\ 11\ |\ 23\ |\ \ 107\ |\r\n\ \r\n\ Si\ la\ lista\ est\u00E1\ vac\u00EDa\ devuelve\ ""\r\n
comment6.params=
comment6.target=void\ vaciarLista()
comment6.text=\r\n\ \ Vac\u00EDa\ la\ lista\r\n
comment7.params=
comment7.target=int\ segundoMinimo()
comment7.text=\r\n\ \ \r\n\ @return\ \ \ el\ segundo\ m\u00EDnimo\ de\ la\ lista\r\n\ Asumimos\ que\ la\ lista\ tiene\ al\ menos\ un\ elemento\r\n\ \r\n\ \r\n\ Si\ lista\ \=\ {12,\ \ 12,\ \ 12,\ \ 4,\ \ 4,\ \ 55,\ 789}\ el\ 2\u00BA\ m\u00EDnimo\ es\ 12\r\n\ Si\ lista\ \=\ {4,\ 4,\ 3,\ 3,\ 3,\ 7,\ 7,\ 8}\ el\ 2\u00BA\ m\u00EDnimo\ es\ 4\r\n\ Si\ lista\ \=\ {4,\ 4}\ el\ 2\u00BA\ m\u00EDnimo\ es\ 4\r\n\ Si\ lista\ \=\ {4,\ 3,\ 2,\ -7,\ -5}\ el\ 2\u00BA\ m\u00EDnimo\ es\ -5\r\n
comment8.params=
comment8.target=int\ borrarSegundosMinimos()
comment8.text=\r\n\ \ Borra\ todos\ los\ segundos\ m\u00EDnimos\ de\ la\ lista\ y\ devuelve\ el\ total\ de\r\n\ \ \ \ borrados.\ Sin\ utilizar\ arrays\ adicionales\r\n\ \ \r\n
comment9.params=
comment9.target=ListaNumeros\ digitosMasGrandes()
comment9.text=\r\n\ \ Calcula\ y\ devuelve\ un\ nuevo\ objeto\ ListaNumeros\ \ \r\n\ \ Este\ objeto\ contiene\ tambi\u00E9n\ un\ array\ con\ tantos\ elementos\ como\ hay\ en\ el\ array\ lista\r\n\ \ pero\ en\ cada\ posici\u00F3n\ queda\ el\ d\u00EDgito\ mayor\ de\ cada\ uno\ de\ \r\n\ \ los\ elementos\ de\ lista\r\n\ \ \r\n\ \ Si\ lista\ contiene\ {175,\ 826,\ 89,\ 9,\ 41,\ 13,\ 72,\ 11,\ 23,\ 107}\ \ devuelve\r\n\ \ {7,\ 8,\ 9,\ 9,\ 4,\ 3,\ 7,\ 1,\ 3,\ 7}\r\n\ \ \r\n\ \ Hay\ que\ utilizar\ el\ m\u00E9todo\ recursivo\ digitoMasGrande()\r\n
numComments=13
