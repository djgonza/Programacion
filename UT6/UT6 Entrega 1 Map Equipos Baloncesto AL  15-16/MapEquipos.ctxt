#BlueJ class context
comment0.params=
comment0.target=MapEquipos()
comment0.text=\r\n\ Constructor\ de\ la\ clase\ MapEquipos\r\n
comment1.params=equipo\ j
comment1.target=void\ addJugador(java.lang.String,\ Jugador)
comment1.text=\r\n\ a\u00F1adir\ un\ \ Jugador\ a\ la\ lista\ de\ Jugadores\ del\ equipo\r\n\ @param\ equipo\ el\ equipo\ en\ que\ se\ a\u00F1ade\ el\ Jugador\r\n\ @param\ j\ el\ Jugador\ a\ a\u00F1adir\r\n\ \ \r\n\ Si\ el\ equipo\ no\ existe\ se\ crear\u00E1\ una\ nueva\ entrada\ asociando\ ese\ equipo\ junto\ con\ el\ jugado\r\n\ Si\ \ el\ equipo\ existe\ \u00FAnicamente\ se\ a\u00F1ade\ un\ \ Jugador\ m\u00E1s\ que\ \ juega\ en\ \u00E9l\r\n\ \r\n\ Los\ equipos\ siempre\ se\ a\u00F1aden\ en\ may\u00FAsculas\r\n
comment2.params=equipo
comment2.target=int\ jugadoresEn(java.lang.String)
comment2.text=\r\n\ \ Devuelve\ la\ cantidad\ de\ Jugadores\ del\ equipo\ indicado\r\n\ \ Si\ no\ existe\ lel\ equipo\ devuelve\ -1\r\n\r\n
comment3.params=
comment3.target=java.util.LinkedList\ obtenerAleros()
comment3.text=\r\n\ \r\n\ @return\ una\ lista\ LinkedList\ de\ String\ con\ los\r\n\ nombres\ de\ los\ jugadores\ que\ act\u00FAan\ como\ aleros\ en\ sus\ equipos\r\n\ Cada\ vez\ que\ se\ a\u00F1ade\ a\ la\ lista\ se\ hace\ al\ principio\r\n\ \r\n\ Usa\ el\ conjunto\ de\ entradas\ y\ un\ for\ mejorado\r\n
comment4.params=equipo
comment4.target=double\ alturaMedia(java.lang.String)
comment4.text=\r\n\ \ dado\ un\ equipo\ (asumimos\ que\ existe)\ obtener\ la\ altura\r\n\ \ media\ de\ sus\ jugadores\r\n\r\n
comment5.params=edad
comment5.target=java.util.HashSet\ borrarMenoresDe(int)
comment5.text=\r\n\ borra\ del\ map\ los\ jugadores\ con\ edad\ menor\ que\ la\ indicada\r\n\ y\ devuelve\ un\ conjunto\ (sin\ importar\ el\ orden)\ con\ los\ \r\n\ nombres\ de\ los\ jugadores\ borrados\r\n\ \r\n\ Usa\ para\ recorrer\ el\ map\ el\ conjunto\ de\ entradas\ y\ un\ iterador.\r\n
comment6.params=
comment6.target=java.lang.String\ toString()
comment6.text=\r\n\ Representaci\u00F3n\ textual\ del\ map,\ cada\ equipo\ junto\ con\ los\ jugadores\r\n\ \ \r\n\ Con\ el\ conjunto\ de\ claves\ y\ for\ mejorado\r\n\ De\ forma\ eficiente\ ya\ que\ habr\u00E1\ muchas\ concatenaciones\r\n
comment7.params=datosJugador
comment7.target=Jugador\ obtenerJugador(java.lang.String[])
comment7.text=\r\n\ \ Dado\ un\ array\ de\ String\ con\ los\ datos\ de\ un\ \ Jugador\ \r\n\ \ obtiene\ y\ devuelve\ un\ objeto\ Jugador\ \r\n\r\n\ \ Ej.\ a\ partir\ del\ array\ {"kobe\ bryant",\ \ "23",\ "9",\ "1978",\ "1.98",\ "ALERO"}\ \r\n\ \ obtiene\ el\ objeto\ Jugador\ correspondiente\r\n\ \ \r\n\ \ Asumimos\ todos\ los\ valores\ correctos\r\n
comment8.params=
comment8.target=void\ leerDeFichero()
comment8.text=\r\n\ \ Lee\ de\ un\ fichero\ l\u00EDneas\ de\ datos\ con\ la\ informaci\u00F3n\ de\ cada\ Jugador\ \r\n\ \ Hace\ uso\ de\ los\ m\u00E9todos\ parsearLinea()\ y\ addJugador()\r\n
comment9.params=
comment9.target=void\ escribir()
comment9.text=\r\n\ Mostra\ la\ lista\r\n
numComments=10
