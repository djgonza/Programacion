package mapa;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import control.Teclado;
import graficos.Pantalla;
import mapa.frame.Frame;
import mapa.frame.sprite.Sprite;

public class Mapa {

	private Pantalla pantalla;
	private Teclado teclado;

	private String zona;
	private int ancho;
	private int alto;

	private int[] pixeles;
	private int[] pixelesLogicos;

	private int x;
	private int y;

	private ArrayList<Sprite> sprites;
	private ArrayList<Frame> frames;

	public Mapa(Pantalla pantalla, Teclado teclado) {

		this.pantalla = pantalla;
		this.teclado = teclado;

		// inicializamos el array list y añadimos el primero que estara vacio
		this.sprites = new ArrayList<>();
		this.sprites.add(new Sprite(new int[0]));

		this.frames = new ArrayList<>();

		this.zona = "pruebaMedio";

		cargarZona(zona);
		// generarMapaAleatorio();
		actualizar();

		System.out.println(frames.size());

	}

	/*
	 * carga la zona asignada por parametro
	 */
	private void cargarZona(String zona) {

		try {
			// Carga del documento xml
			DocumentBuilderFactory factory = DocumentBuilderFactory
					.newInstance();
			DocumentBuilder builder = factory.newDocumentBuilder();
			Document documento = builder.parse(
					new File("recursos/mapa/zonas/" + zona + ".tmx"));

			// Preparación de xpath
			XPath xpath = XPathFactory.newInstance().newXPath();

			// sacamos el nodo raiz
			Node mapa = (Node) xpath.evaluate("/map", documento,
					XPathConstants.NODE);
			NamedNodeMap aMapa = mapa.getAttributes(); // atributos del mapa

			// sacamos las dimensiones de los tiles
			int tilewidth = Integer.valueOf(
					aMapa.getNamedItem("tilewidth").getTextContent());
			int tileheight = Integer.valueOf(
					aMapa.getNamedItem("tileheight").getTextContent());

			// sacamos el ancho y el alto del mapa
			ancho = Integer
					.valueOf(aMapa.getNamedItem("width").getTextContent())
					* tilewidth;
			alto = Integer
					.valueOf(aMapa.getNamedItem("height").getTextContent())
					* tileheight;

			// creamos el array que contiene los pixeles
			pixeles = new int[ancho * alto];

			// recorremos los nodos del documento
			Node nodoActual = mapa.getFirstChild();
			while (nodoActual != null) {

				switch (nodoActual.getNodeName()) {

				case "properties":
					cargarPropiedades(nodoActual, tilewidth, tileheight);
					break;
				case "tileset":
					cargarTileSet(nodoActual);
					break;
				case "layer":
					cargarFrames(nodoActual);
					break;
				case "objectgroup":
					// System.out.println("objeto");
					break;
				default:
					break;

				}

				nodoActual = nodoActual.getNextSibling();

			}

		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		}

	}

	/*
	 * lee y carga las propiedades del mapa
	 */
	private void cargarPropiedades(Node properties, int tilewidth,
			int tileheight) {

		// buscamos los hijos del nodo
		NodeList hijos = properties.getChildNodes();

		// recorremos los hijos
		for (int i = 0; i < hijos.getLength(); i++) {

			Node hijo = hijos.item(i);

			// si es un nodo
			if (hijo.getNodeType() == 1) {

				// sacamos los atributos
				NamedNodeMap atributosHijo = hijo.getAttributes();

				// evaluamos que atributo es
				switch (atributosHijo.getNamedItem("name")
						.getNodeValue()) {
				case "x":
					x = Integer.valueOf(atributosHijo.getNamedItem("value")
							.getNodeValue()) * tilewidth;
					break;
				case "y":
					y = Integer.valueOf(atributosHijo.getNamedItem("value")
							.getNodeValue()) * tileheight;
					break;
				}

			}
		}

	}

	/*
	 * carga las hojas de sprites que necesita la zona
	 */
	private void cargarTileSet(Node tileSet) {

		NamedNodeMap atributosTileSet = tileSet.getAttributes();

		// buscamos los atributos de la hoja de sprite
		// int idPrimerSprite =
		// Integer.parseInt(atributosTileSet.getNamedItem("firstgid").getNodeValue());
		int tilewidth = Integer.parseInt(
				atributosTileSet.getNamedItem("tilewidth").getNodeValue());
		int tileheight = Integer.parseInt(atributosTileSet
				.getNamedItem("tileheight").getNodeValue());
		int cantidadDeSprites = Integer.parseInt(
				atributosTileSet.getNamedItem("tilecount").getNodeValue());
		int cantidadColumnas = Integer.parseInt(
				atributosTileSet.getNamedItem("columns").getNodeValue());

		// buscamos la ruta de la imagen
		String rutaImagenSinFormatear = tileSet.getChildNodes().item(1)
				.getAttributes().getNamedItem("source").getNodeValue();
		String rutaImagen = rutaImagenSinFormatear.substring(
				rutaImagenSinFormatear.lastIndexOf('/') + 1,
				rutaImagenSinFormatear.length());

		try {

			// cargamos la imagen
			BufferedImage imagen = ImageIO
					.read(new File("recursos/texturas/" + rutaImagen));

			// creamos los sprites
			/*
			 * faltan las animaciones y las colisiones cada sprite guarda un
			 * array con las colisiones y un array list con los pixeles de las
			 * animaciones
			 */
			for (int y = 0; y < cantidadDeSprites
					/ cantidadColumnas; y++) {
				for (int x = 0; x < cantidadColumnas; x++) {

					int startX = x * (tilewidth);
					int startY = y * (tileheight);
					int w = tilewidth;
					int h = tileheight;
					int scansize = tilewidth;

					sprites.add(new Sprite(imagen.getRGB(startX, startY, w,
							h, null, 0, scansize)));

				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	private void cargarFrames(Node nodoActual) {

		int width = Integer.parseInt(nodoActual.getAttributes()
				.getNamedItem("width").getNodeValue());
		// int height =
		// Integer.parseInt(nodoActual.getAttributes().getNamedItem("height").getNodeValue());
		String framesLeidos = nodoActual.getFirstChild().getNextSibling()
				.getLastChild().getNodeValue();

		// recorremos las posiciones
		// si no existe el frame lo creamos
		// si existe añadimos el sprite
		int i = 0;
		for (String indiceLeido : framesLeidos.split(",")) {

			int indice = Integer.parseInt(indiceLeido.trim());
			if (indice > 0) { // evita añadir sprites vacios

				// recojemos el sprite para añadirlo al frame
				Sprite sprite = sprites.get(indice);

				Frame frameTemp;

				// si el frame no existe lo creamos
				// si no lo añadimos
				if (frames.size() <= i) {

					// calculamos las coordenadas del frame
					int y = (int) Math.floor(i / width);
					int x = i - (y * width);
					y *= Math.sqrt(sprite.getPixeles().length);
					x *= Math.sqrt(sprite.getPixeles().length);

					// System.out.println(x + " : " + y);

					// creamos el frame
					frameTemp = new Frame(x, y, this);
					frames.add(frameTemp);

				} else {
					frameTemp = frames.get(i);
				}

				// añadimos el sprite al frame
				frameTemp.addSprite(sprite);

			}

			i++;

		}

	}

	/*
	 * genera un mapa aleatorio para pruebas
	 */
	private void generarMapaAleatorio() {

		// Random aleatorio = new Random();

		// definimos las dimensiones del mapa
		this.ancho = 100;
		this.alto = 100;

		// definimos donde va a aparecer el personaje
		this.x = 45;
		this.y = 100;

		// creamos el mapa
		this.pixeles = new int[alto * ancho];
		for (int i = 0; i < pixeles.length; i++) {
			pixeles[i] = Color.cyan.getRGB();
		}

		// cargamos los elementos del mapa

	}

	public void mostrar() {

		actualizarCoordenadas();

		// calculamos las coordenadas para iniciar a copiar
		int w = pantalla.ANCHO_ZONA_PINTAR;
		int h = pantalla.ALTO_ZONA_PINTAR;

		int xInicioPantalla, xInicioMapa, yInicioPantalla, yInicioMapa;
		int xFinPantalla, xFinMapa, yFinPantalla, yFinMapa;

		// calculamos las coordenadas de inicio
		xInicioMapa = this.x - w / 2;
		if (xInicioMapa < 0) {
			xInicioPantalla = Math.abs(xInicioMapa);
			xInicioMapa = 0;
		} else {
			xInicioPantalla = 0;
		}

		yInicioMapa = this.y - h / 2;
		if (yInicioMapa < 0) {
			yInicioPantalla = Math.abs(yInicioMapa);
			yInicioMapa = 0;
		} else {
			yInicioPantalla = 0;
		}

		// calculamos las coordenadas de fin
		xFinMapa = xInicioMapa + (w - xInicioPantalla);
		if (xFinMapa > ancho) {
			xFinPantalla = w - (xFinMapa - ancho);
			xFinMapa = ancho;
		} else {
			xFinPantalla = w;
		}

		yFinMapa = yInicioMapa + (h - yInicioPantalla);
		if (yFinMapa > alto) {
			yFinPantalla = yFinMapa - alto;
			yFinMapa = alto;
		} else {
			yFinPantalla = h;
		}

		// StringBuilder sb = new StringBuilder();
		// sb.append("x Mapa: ").append('\n');
		// sb.append('\t').append("xInicio: ").append(xInicioMapa).append('\n');
		// sb.append('\t').append("xFin: ").append(xFinMapa).append('\n');
		//
		// sb.append("x Pantalla: ").append('\n');
		// sb.append('\t').append("xInicio:
		// ").append(xInicioPantalla).append('\n');
		// sb.append('\t').append("xFin: ").append(xFinPantalla).append('\n');
		//
		// sb.append("y Mapa: ").append('\n');
		// sb.append('\t').append("yInicio: ").append(yInicioMapa).append('\n');
		// sb.append('\t').append("yFin: ").append(yFinMapa).append('\n');
		//
		// sb.append("y Pantalla: ").append('\n');
		// sb.append('\t').append("yInicio:
		// ").append(yInicioPantalla).append('\n');
		// sb.append('\t').append("yFin: ").append(yFinMapa).append('\n');
		//
		// sb.append("indicePantalla : ").append(xFinPantalla + yFinPantalla +
		// w).append(' ')
		// .append(pantalla.pixeles.length).append('\n');
		// sb.append("indiceMapa : ").append(xFinMapa + yFinMapa *
		// ancho).append(' ').append(pixeles.length).append('\n');

		// System.out.println(sb.toString());

		for (int i = 0; i < yFinMapa - yInicioMapa; i++) {

			System.arraycopy(pixeles,
					xInicioMapa + (yInicioMapa + i) * ancho,
					pantalla.pixeles,
					xInicioPantalla + (yInicioPantalla + i) * w,
					xFinPantalla - xInicioPantalla);

		}

	}

	private void actualizarCoordenadas() {

		int velocidad = 1;

		if (teclado.arriva)
			if (y - 1 > 0)
				y -= velocidad;
		if (teclado.abajo)
			if (y + 1 < alto)
				y += velocidad;
		if (teclado.izquierda)
			if (x - 1 > 0)
				x -= velocidad;
		if (teclado.derecha)
			if (x + 1 < ancho)
				x += velocidad;

		// System.out.println(x + " : " + y);

	}

	public void actualizar() {

		for (Frame frame : frames) {
			frame.mostrar();
		}
	}

	public void setPixeles(int indice, int valor) {
		if (indice >= 0 && indice < pixeles.length)
			this.pixeles[indice] = valor;
	}

	public int getAncho() {
		return ancho;
	}

	public int getAlto() {
		return alto;
	}

	public void setX(int x) {
		this.x = x;
	}

	public void setY(int y) {
		this.y = y;
	}

	public void aumentarX() {
		x++;
		mostrar();
	}

	public void aumentarY() {
		y++;
		mostrar();
	}

	public void decrementarX() {
		x--;
		mostrar();
	}

	public void decrementarY() {
		y--;
		mostrar();
	}

}
